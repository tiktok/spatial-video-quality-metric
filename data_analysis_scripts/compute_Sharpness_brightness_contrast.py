import osimport numpy as npimport cv2import multiprocessing as mpimport tqdmimport pandas as pdimport avfrom scipy import ndimageimport imageioimport numpy as npdef videoset_iterator(data_dir):    for entry in os.scandir(data_dir):        if entry.is_dir(follow_symlinks=False):            yield from videoset_iterator(entry.path)        else:            if '.mov' in entry.name:                yield (entry.name, entry.path)def video_iterator(input_file):    container = av.open(input_file)    for frame_number, frame in enumerate(container.decode(video=0)):        if frame_number % 30 == 0:            yield frame.to_ndarray(format="gray").astype("int")def get_brightness(img_gray):    if img_gray is None:        return None    return np.mean(np.array(img_gray, dtype=np.float64))def get_contrast(img_gray):    if img_gray is None:        return None    return np.std(img_gray)def get_sharpness(img_gray):    if img_gray is None:        return None    sx = ndimage.sobel(img_gray, axis=0) # do not use mode option,    sy = ndimage.sobel(img_gray, axis=1) # since it will change the value a lot!!!    mag = np.hypot(sx, sy)[1:-1,1:-1]    return np.mean(mag)def calculate_features(input_file):  # renamed video to input_file to reflect that it's a file path    sharpness_infos = []    contrast_infos = []    brightness_infos = []    for frame in video_iterator(input_file):  # directly use the file path here        frame_grey = frame                # Spatial info        sharpness_info = get_sharpness(frame_grey)        sharpness_infos.append(sharpness_info)                # Temporal info        contrast_info = get_contrast(frame_grey)        contrast_infos.append(contrast_info)                # Color info        brightness_info = get_brightness(frame_grey)        brightness_infos.append(brightness_info)        sharpness_info_ret = np.mean(sharpness_infos)    contrast_info_ret = np.mean(contrast_infos)    brightness_info_ret = np.mean(brightness_infos)    return (sharpness_info_ret, contrast_info_ret, brightness_info_ret)def get_video_infos(video_metadata):    name, path = video_metadata    return (name, calculate_features(path))  # pass the file path instead of the video objectdef get_video_stats(data_dir):    stats = {}    with mp.Pool() as p:        with tqdm.tqdm(total=224) as progress_bar:            for name, infos in p.imap(get_video_infos, videoset_iterator(data_dir)):                stats[name] = infos                progress_bar.update(1)    return statsdef main():    dataset = './videos'    data_dir = dataset    out_path = './Sharpness_Contrast_Brightness/' + dataset +'_Sharpness_Contrast_Brightness.csv'    video_stats = get_video_stats(data_dir)    # print(video_stats)    df = pd.DataFrame.from_dict(video_stats, orient='index', columns=['Sharpness', 'Contrast', 'Brightness'])    df.to_csv(out_path)    print("Feature Extraction Complete!!")    if __name__ == '__main__':    main()